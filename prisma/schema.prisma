generator client {
	provider        = "prisma-client-js"
	previewFeatures = ["driverAdapters"] //, "fullTextSearchPostgres"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model FoodType {
	id          			Int          		@id @default(autoincrement())
	name        			String
	ingredients 			Ingredient[]
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}

model Ingredient {
	id         				Int      			@id @default(autoincrement())
	name       				String
	foodType   				FoodType 			@relation(fields: [foodTypeId], references: [id])
	foodTypeId 				Int
	icon					String?
	seasonalMonths			Json
	recipes					RecipeIngredient[]
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt  				DateTime 			@default(now())	@map("created_at")
	updatedAt  				DateTime? 			@updatedAt @map("updated_at")
}

model RecipesCategory {
	id          			Int          		@id @default(autoincrement())
	name        			String
	mealTypes				MealType[]
	dishType				DishType			@relation(fields: [dishTypeId], references: [id])
	dishTypeId 				Int
	recipes					Recipe[]
	createdBy				User				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}

model Recipe {
	id          			Int          		@id @default(autoincrement())
	name        			String
	peopleNumber			Int
	cookingTime				Float?
	preparationTime 		Float?
	restTime				Float?
	description				String?
	tips					String?
	season     				Season   			@relation(fields: [seasonId], references: [id])
	seasonId   				Int
	ustensils				Ustensil[]
	sequences				Sequence[]
	allergens				Allergen[]
	ingredients				RecipeIngredient[]
	recipesCategory 		RecipesCategory		@relation(fields: [recipesCategoryId], references: [id])
	recipesCategoryId		Int
	createdBy				User				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}

model RecipeIngredient {
	id          			Int          		@id @default(autoincrement())
	ingredient				Ingredient 			@relation(fields: [ingredientId], references: [id])
	ingredientId 			Int
	quantity				Int
	recipe					Recipe 				@relation(fields: [recipeId], references: [id])
	recipeId 				Int
	unit					Unit 				@relation(fields: [unitId], references: [id])
	unitId 					Int
}

model Sequence {
	id						Int          		@id @default(autoincrement())
	title					String
	description				String
	recipe   				Recipe 				@relation(fields: [recipeId], references: [id])
  	recipeId 				Int
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}

model Ustensil {
	id						Int          		@id @default(autoincrement())
	name					String
	recipes 				Recipe[]
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}

model Season {
	id          			Int          		@id @default(autoincrement())
	name        			String
	start       			Int
	end         			Int
	ingredients 			Recipe[]
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())
	updatedAt   			DateTime?     		@updatedAt
}

model User {
	id          			Int          		@id @default(autoincrement())
	email					String				@unique
	password				String
	firstname				String
	lastname				String
	picture					String
	recipeCreatedNumber 	Int
	recipes					Recipe[]
	role					String				@default("User")
	seasons 				Season[]
	sequences 				Sequence[]
	ustensils 				Ustensil[]
	ingredients 			Ingredient[]
	foodTypes 				FoodType[]
	allergens 				Allergen[]
	units 					Unit[]
	recipesCategories 		RecipesCategory[]
	mealTypes 				MealType[]
	DishType 				DishType[]
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}

model Unit {
	id          			Int          		@id @default(autoincrement())
	name					String				@unique
	shortForm				String
	recipeIngredients 		RecipeIngredient[]
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())
	updatedAt   			DateTime?     		@updatedAt
}

model MealType {
	id						Int          		@id @default(autoincrement())
	name					String
	recipesCategories 		RecipesCategory[]
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}

model DishType {
	id						Int          		@id @default(autoincrement())
	name					String
	recipesCategories 		RecipesCategory[]
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}

model Allergen {
	id						Int          		@id @default(autoincrement())
	name					String
	icon					String
	recipes			 		Recipe[]
	createdBy				User 				@relation(fields: [createdById], references: [id])
	createdById 			Int
	createdAt   			DateTime     		@default(now())	@map("created_at")
	updatedAt   			DateTime?     		@updatedAt @map("updated_at")
}
